#!/usr/bin/env ruby

require 'rubygems'
require 'yaml'

if !(/major|minor|patch|pre-release/.match(ARGV[0])) ||
   (ARGV[0] == 'pre-release' && ARGV[1].nil?)
  puts "Usage: `script/release major|minor|patch|pre-release [pre-release version]`"
  puts "To remove the pre-release version without incrementing the version, use `script/release final`"
  exit
end

vpath = File.expand_path('../../version.yml',  __FILE__)
vfile = File.open(vpath, 'r+')
ver = YAML.load_file(vfile)
vfile.close

case ARGV[0]
when 'major'
  ver['major'] = ver['major'] + 1
  ver['minor'] = 0
  ver['patch'] = 0
  ver['pre-release'] = ''
when 'minor'
  ver['minor'] = ver['minor'] + 1
  ver['patch'] = 0
  ver['pre-release'] = ''
when 'patch'
  ver['patch'] = ver['patch'] + 1
  ver['pre-release'] = ''
when 'pre-release'
  ver['pre-release'] = ARGV[1]
when 'final'
  ver['pre-release'] = ''
end

puts "Updating version.yml file with #{ver}"
File.open(vpath, 'w' ) do |out|
  out.puts "# Do not edit this file directly. Please run `script/release`"
  YAML.dump(ver, out)
end

def stringify(ver)
  s = "v#{ver['major']}.#{ver['minor']}.#{ver['patch']}"
  unless ver['pre-release'].empty?
    s << "-#{ver['pre-release']}"
  end
  s
end

puts "Committing version.yml to #{/\* (.+)/.match(`git branch`)[1]}"
`git add #{vpath}`
`git commit -m 'Update version to #{stringify(ver)}'`

puts "Creating #{stringify(ver)} tag in git"
`git tag -a #{stringify(ver)} -m 'Tagging #{stringify(ver)}'`

puts "Done. Please double check before pushing to remote/origin."