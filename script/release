#!/usr/bin/env ruby

require 'rubygems'
require 'yaml'

vpath = File.expand_path('../../version.yml',  __FILE__)
vfile = File.open(vpath, 'r+')
ver = YAML.load_file(vfile)
vfile.close
was_prerelease = !ver['pre-release'].empty?

if !(/major|minor|patch|pre|final/.match(ARGV[0])) ||
   (ARGV[0] == 'pre' && ARGV[1].nil?) ||
   (ARGV[0] == 'pre' && !was_prerelease)
  puts %{
    Usage: `script/release major|minor|patch|pre|final [pre-release version]`

    Examples:
      Assume original version is v1.5.2 in each of the following examples.
        script/release major         => v2.0.0
        script/release major beta1   => v2.0.0-beta1
        script/release minor         => v1.6.0
        script/release pre beta4     => (Not allowed since original version is already final)

      Assume original version is v1.2.3-alpha1
        script/release pre alpha2    => v1.2.3-alpha2
        script/release pre beta2     => v1.2.3-beta2
        script/release final         => v1.2.3
  }
  exit
end

case ARGV[0]
when 'major'
  ver['major'] = ver['major'] + 1
  ver['minor'] = 0
  ver['patch'] = 0
  ver['pre-release'] = ''
when 'minor'
  ver['minor'] = ver['minor'] + 1
  ver['patch'] = 0
  ver['pre-release'] = ''
when 'patch'
  ver['patch'] = ver['patch'] + 1
  ver['pre-release'] = ''
when 'final'
  ver['pre-release'] = ''
end

# This is a separate if condition so that the user
# can say `script/release pre beta1` (which
# appends a pre-release version to the existing version)
# as well as say `script/release minor beta1 (which
# bumps the minor version while attaching a pre-release
# version to it at the same time).
if (ARGV[0]=='pre' || ARGV[1]) && ARGV[0] != 'final'
  ver['pre-release'] = ARGV[1]
end

puts "Updating version.yml file with #{ver}"
File.open(vpath, 'w' ) do |out|
  out.puts "# Do not edit this file directly. Please run `script/release`"
  YAML.dump(ver, out)
end

def stringify(ver)
  s = "v#{ver['major']}.#{ver['minor']}.#{ver['patch']}"
  unless ver['pre-release'].empty?
    s << "-#{ver['pre-release']}"
  end
  s
end

puts "Committing version.yml to #{/\* (.+)/.match(`git branch`)[1]}"
`git add #{vpath}`
`git commit -m 'Update version to #{stringify(ver)}'`

puts "Creating #{stringify(ver)} tag in git"
`git tag -a #{stringify(ver)} -m 'Tagging #{stringify(ver)}'`

puts "Done. Please double check before pushing to remote/origin."